using System;
using System.Collections.Generic;

namespace Crypto3.Stuff
{
    /* 
     * 1. –†–µ–∞–ª–∏–∑—É–π—Ç–µ stateless-—Å–µ—Ä–≤–∏—Å, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –æ–±—ä–µ–∫—Ç–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è:
     *     - —Å–ª–æ–∂–µ–Ω–∏—è –¥–≤–æ–∏—á–Ω—ã—Ö –ø–æ–ª–∏–Ω–æ–º–æ–≤ (–¥–∞–ª–µ–µ - —ç–ª–µ–º–µ–Ω—Ç–æ–≤) –∏–∑ ùê∫ùêπ(2^8)
     *     - —É–º–Ω–æ–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –º–æ–¥—É–ª—é ùê∫ùêπ(2^8)
     *     - –≤–∑—è—Ç–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –ø–æ ùê∫ùêπ(2^8) –∑–∞–¥–∞–Ω–Ω–æ–º—É –º–æ–¥—É–ª—é;
     *     - –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–≤–æ–∏—á–Ω–æ–≥–æ –ø–æ–ª–∏–Ω–æ–º–∞ —Å—Ç–µ–ø–µ–Ω–∏ 8 –Ω–∞ –Ω–µ–ø—Ä–∏–≤–æ–¥–∏–º–æ—Å—Ç—å –Ω–∞–¥ ùê∫ùêπ(2^8)
     *     - –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤—Å–µ—Ö –Ω–µ–ø—Ä–∏–≤–æ–¥–∏–º—ã—Ö –Ω–∞–¥ ùê∫ùêπ(2^8) –¥–≤–æ–∏—á–Ω—ã—Ö –ø–æ–ª–∏–Ω–æ–º–æ–≤ —Å—Ç–µ–ø–µ–Ω–∏ 8
     * –ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏–≤–æ–¥–∏–º–æ–º—É –Ω–∞–¥ –ø–æ–ª–µ–º –º–æ–¥—É–ª—é, –≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ (–∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–π—Ç–µ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ)
     * –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é. –ó–Ω–∞—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –∏ ùê∫ùêπ(2^8) –º–æ–¥—É–ª–µ–π –Ω–∞–¥ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ –≤ –≤–∏–¥–µ
     * –æ–¥–Ω–æ–±–∞–π—Ç–æ–≤—ã—Ö ùê∫ùêπ(2^8) –∑–Ω–∞—á–µ–Ω–∏–π (byte, char, ...). –ü—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è—Ö –º–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∏—Ç–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
     */
    public static class GaloisField
    {
        public static Byte Add(Byte lhs, Byte rhs)
        {
            return (Byte)(lhs ^ rhs);
        }

        public static Byte Multiply(Byte lhs, Byte rhs)
        {
            Byte resultPoly = 0;
            Byte counter;
            for (counter = 0; counter < 8; counter++) 
            {
                if ((rhs & 1) != 0)
                {
                    resultPoly ^= lhs;
                }

                var hiBitSet = (Byte)(lhs & 0x80);
                lhs <<= 1;
                if (hiBitSet != 0)
                {
                    lhs ^= 0x1b;
                }

                rhs >>= 1;
            }

            return resultPoly;
        }

        public static UInt64 MultiplyMod(UInt32 lhs, UInt32 rhs, UInt16 modulo)
        {
            if (lhs > rhs) 
            {
                lhs = lhs ^ rhs;
                rhs = lhs ^ rhs;
                lhs = lhs ^ rhs;
            }

            UInt64 result = 0;
            var tmpRhs = (UInt64)rhs;
            while (lhs > 0)
            {
                if ((lhs & 1) != 0)
                {
                    result = (result + tmpRhs) % modulo;
                }

                tmpRhs = (tmpRhs << 1) % modulo;
                lhs >>= 1;
            }

            return result;
        }

        public static UInt32 Inverse(Byte value, UInt16 modulo)
        {
            UInt32 result = 1;
            UInt16 pow = 254;
            UInt32 tmp = value;
            while (pow > 0) 
            {
                if ((pow & 1) != 0)
                {
                    result = (UInt32)MultiplyMod(result, tmp, modulo);
                }

                tmp = (UInt32)MultiplyMod(tmp, tmp, modulo);
                pow >>= 1;
            }

            return result;
        }

        public static UInt16 ExtentFunc(UInt16 value)
        {
            UInt16 number = 0;
            UInt16 one = 1;
            
            for (Byte counter = 0 ; counter < 13; counter++) 
            {
                if ((one & value) != 0)
                {
                    number = counter;
                }

                one <<= 1;
            }

            return number;
        }

        public static UInt16 DivideMod(UInt16 lhs, UInt16 rhs)
        {
            var firstExtent = ExtentFunc(rhs);
            var secondExtent = ExtentFunc(lhs);

            while (firstExtent <= secondExtent)
            {
                var tmp = (UInt16)(rhs << (secondExtent - firstExtent));
                lhs ^= tmp;
                secondExtent = ExtentFunc(lhs);
            }

            return lhs;
        }

        public static List<UInt16> FindIrreduciblePolynomials()
        {
            List<UInt16> items = new List<UInt16>();
            var isSimple = false;
            for (var count = 257; count < 512; count += 2)
            {
                for (var secondCount = 3; secondCount < 32; secondCount++) 
                {
                    if (DivideMod((UInt16)count, (UInt16)secondCount) == 0)
                    {
                        isSimple = false;
                    }
                }
                if (isSimple) {
                    items.Add((UInt16)count);
                }

                isSimple = true;
            }

            return items;
        }
    }
}